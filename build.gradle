/*
 * Copyright 2019 Mark Slater
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

plugins {
    id 'java'
    id 'signing'
    id 'maven'
    id 'pmd'
    id 'com.github.spotbugs' version '2.0.0'
    id 'org.hidetake.ssh' version '2.1.0'
    id 'org.tenne.rest' version '0.4.2'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id 'org.unbroken-dome.test-sets' version '2.2.1'
}

repositories {
    mavenCentral()
}

sourceSets {
    documentation
}

configurations {
    batik
    anttask
}

dependencies {
    compile group: 'org.apache.ant', name: 'ant', version: '1.10.3'
    compile group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: '1.9.1'
    compile (group: 'xerces', name: 'xercesImpl', version: '2.11.0') {
        because('batik 1.9 has bought into the enduring xerces horror')
    }

    compile (group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.0') {
        because 'batik 1.8 needs this but forgot to declare the dependency'
    }
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'org.jclarion', name: 'image4j', version: '0.7'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
    testCompile group: 'net.sourceforge.ickles', name: 'ickles', version: '0.12'
    testCompile group: 'com.google.guava', name: 'guava', version: '19.0'

    documentationCompile sourceSets.main.output
    documentationCompile group: 'net.sourceforge.writexml', name: 'writexml', version: '1.1'
    documentationCompile group: 'net.sourceforge.xazzle', name: 'xazzle', version: '0.39'
    documentationCompile group: 'net.sourceforge.svg2ico', name: 'svg2ico', version: '1.5'
    documentationCompile group: 'net.sourceforge.urin', name: 'urin', version: '2.22'

    batik group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: '1.7'
    batik group: 'org.apache.xmlgraphics', name: 'xmlgraphics-commons', version: '2.0'
    batik group: 'org.apache.xmlgraphics', name: 'batik-codec', version: '1.7'

    anttask project(path: ':', configuration: 'shadow')
}

group = 'net.sourceforge.svg2ico'
version = "${majorVersion}.${minorVersion}"
description = 'svg2ico converts images in SVG format to ICO.'

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

pmd {
    toolVersion = '6.16.0'
}

jar {
    manifest {
        attributes 'Main-Class': 'net.sourceforge.svg2ico.CommandLine'
    }
}

shadowJar {
    relocate 'net.sf.image4j', 'net.sourceforge.svg2ico.shadowjar.net.sf.image4j'
    relocate 'org.apache.batik', 'net.sourceforge.svg2ico.shadowjar.org.apache.batik'
    relocate 'org.apache.xmlgraphics', 'net.sourceforge.svg2ico.shadowjar.org.apache.xmlgraphics'
    relocate 'org.w3c.dom.svg', 'net.sourceforge.svg2ico.shadowjar.org.w3c.dom.svg'
    relocate 'org.apache.commons.cli', 'net.sourceforge.svg2ico.shadowjar.org.apache.commons.cli'
    relocate 'org.w3c.css', 'org.w3c.css'
    relocate 'org.w3c.dom', 'org.w3c.dom'
    exclude '**/org/w3c/dom/xpath/**/*'
    exclude '**/org/w3c/dom/events/**/*'
    classifier = ''
}

task myJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    title = "svg2ico version ${version}"
    classpath = project.sourceSets.main.compileClasspath
}

task javadocJar(type: Jar) {
    archiveClassifier.set 'javadoc'
    from myJavadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives shadowJar, javadocJar, sourcesJar
}

task documentationDirectory {
    doLast {
        mkdir("${project.buildDir}/documentation")
    }
}

task ico(dependsOn: [documentationDirectory, shadowJar]) {
    doLast {
        ant.taskdef(name: 'svg2ico',
                classname: 'net.sourceforge.svg2ico.Svg2IcoTask',
                classpath: configurations.anttask.asPath
        )
        ant.svg2ico(
                dest: "${project.buildDir}/documentation/favicon.ico"
        ) {
            sourceImage(src: 'resources/favicon.svg', width: '16', height: '16')
            sourceImage(src: 'resources/favicon.svg', width: '24', height: '24')
            sourceImage(src: 'resources/favicon.svg', width: '32', height: '32')
            sourceImage(src: 'resources/favicon.svg', width: '48', height: '48')
            sourceImage(src: 'resources/favicon.svg', width: '64', height: '64')
        }
    }
}

task iconsDirectory {
    doLast {
        mkdir("${project.buildDir}/icons")
    }
}

task png(type: JavaExec, dependsOn: iconsDirectory) {
    main = 'org.apache.batik.apps.rasterizer.Main'
    classpath = configurations.batik
    args '-d', "${project.buildDir}/icons/", '-scriptSecurityOff', '-m', 'image/png', '-w', '48', '-h', '48', 'resources/favicon.svg'
}


task buildDocumentation(type: JavaExec, dependsOn: documentationDirectory) {
    main = 'net.sourceforge.svg2ico.documentation.DocumentationGenerator'
    args "${project.buildDir}/documentation"
    classpath = sourceSets.documentation.runtimeClasspath
}

task documentationJar(type: Tar, dependsOn: [buildDocumentation, ico]) {
    from "${project.buildDir}/documentation"
    from 'docs'
    baseName 'documentation'
    compression = Compression.GZIP
}

remotes {
    sourceforgeShell {
        host = 'shell.sourceforge.net'
        user = "$sourceforgeUser,svg2ico"
        password = "$sourceforgePassword"

    }
    sourceforgeWeb {
        host = 'web.sourceforge.net'
        user = "$sourceforgeUser,svg2ico"
        password = "$sourceforgePassword"

    }
}

task copyToSourceforge(dependsOn: [documentationJar, javadocJar, shadowJar]) {
    doLast {
        ssh.runInOrder {
            session(remotes.sourceforgeShell) {
                execute 'create'
                execute "mkdir -p /home/frs/project/svg2ico/${version}"
            }
            session(remotes.sourceforgeWeb) {
                put from: "${project.buildDir}/distributions/documentation-${version}.tgz", into: '/home/project-web/svg2ico/'
                put from: "${project.buildDir}/libs/svg2ico-${version}-javadoc.jar", into: '/home/project-web/svg2ico/'
                put from: "${project.buildDir}/libs/svg2ico-${version}.jar", into: "/home/frs/project/svg2ico/${version}/svg2ico-${version}.jar"
            }
            session(remotes.sourceforgeShell) {
                execute "mkdir -p /home/project-web/svg2ico/${version}/javadoc && tar -xvf /home/project-web/svg2ico/documentation-${version}.tgz -C /home/project-web/svg2ico/${version} && unzip -d /home/project-web/svg2ico/${version}/javadoc /home/project-web/svg2ico/svg2ico-${version}-javadoc.jar && rm /home/project-web/svg2ico/documentation-${version}.tgz && rm /home/project-web/svg2ico/svg2ico-${version}-javadoc.jar && rm /home/project-web/svg2ico/htdocs ; ln -s /home/project-web/svg2ico/${version} /home/project-web/svg2ico/htdocs"
            }
        }
    }
}

task updateSourceforgeDefaultDownload(type: org._10ne.gradle.rest.RestTask) {
    httpMethod = 'put'
    uri = "https://sourceforge.net/projects/svg2ico/files/${version}//svg2ico-${version}.jar"
    requestContentType = groovyx.net.http.ContentType.URLENC
    contentType = groovyx.net.http.ContentType.JSON
    requestBody = "default=windows&default=mac&default=linux&default=bsd&default=solaris&default=others&download_label=${version}%20with%20source&api_key=$sourceforgeApiKey"
}

signing {
    sign configurations.archives
}

// OSSRH publication
uploadArchives {
    repositories {
        mavenDeployer {
            // POM signature
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            // Target repository
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
            pom.scopeMappings.with {
                mappings.clear()
            }
            pom.project {
                name 'svg2ico'
                description project.description
                packaging 'jar'
                url 'http://svg2ico.sourceforge.net'

                scm {
                    url 'git://git.code.sf.net/p/svg2ico/code'
                }

                developers {
                    developer {
                        id = 'mos20'
                        name = 'Mark Slater'
                    }
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

            }
        }
    }
}

nexusStaging {
    username = ossrhUser
    password = ossrhPassword
}

task aMomentOfReflection {
    doLast {
        sleep(30 * 1000)
    }
}

task performRelease(dependsOn: [clean, build, uploadArchives, copyToSourceforge, png, closeRepository, aMomentOfReflection, promoteRepository, updateSourceforgeDefaultDownload]) {
    doLast {
        println 'Release complete :)'
    }
}

task buildAndDeployCleanVersion(dependsOn: [clean, performRelease]) {
}

task incrementVersionNumber(dependsOn: buildAndDeployCleanVersion) {
    doLast {
        ant.propertyfile(file: file('gradle.properties')) {
            entry(key: 'minorVersion', type: 'int', operation: '+', value: 1)
        }
    }
}

task deploy(dependsOn: incrementVersionNumber) {}

build.mustRunAfter clean
uploadArchives.mustRunAfter build
closeRepository.mustRunAfter uploadArchives
aMomentOfReflection.mustRunAfter closeRepository
promoteRepository.mustRunAfter aMomentOfReflection
updateSourceforgeDefaultDownload.mustRunAfter copyToSourceforge